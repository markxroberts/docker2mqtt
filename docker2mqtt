#!/usr/bin/env python3
"""Listens to `docker system events` and sends container stop/start events to mqtt.
"""
import atexit
import json
import queue
import re
import logging
from os import environ
from socket import gethostname
from subprocess import run, Popen, PIPE
from threading import Thread
from time import sleep, time, localtime
from datetime import datetime

import paho.mqtt.client as mqtt

LOGGING = environ.get('LOGGING', 'INFO')
DESTROYED_CONTAINER_TTL = int(environ.get('DESTROYED_CONTAINER_TTL', 24*60*60))
HOMEASSISTANT_PREFIX = environ.get('HOMEASSISTANT_PREFIX', 'homeassistant')
HOMEASSISTANT_NAME_PREFIX = environ.get('HOMEASSISTANT_NAME_PREFIX', 'docker')
DOCKER2MQTT_HOSTNAME = environ.get('DOCKER2MQTT_HOSTNAME', gethostname())
MQTT_CLIENT_ID = environ.get('MQTT_CLIENT_ID', 'docker2mqtt')
MQTT_USER = environ.get('MQTT_USER', '')
MQTT_PASSWD = environ.get('MQTT_PASSWD', '')
MQTT_HOST = environ.get('MQTT_HOST', 'localhost')
MQTT_PORT = int(environ.get('MQTT_PORT', '1883'))
MQTT_TIMEOUT = int(environ.get('MQTT_TIMEOUT', '30'))
MQTT_TOPIC_PREFIX = environ.get('MQTT_TOPIC_PREFIX', 'docker')
MQTT_QOS = int(environ.get('MQTT_QOS', 1))
DISCOVERY_TOPIC_STATE = f'{HOMEASSISTANT_PREFIX}/binary_sensor/{MQTT_TOPIC_PREFIX}/{{}}_state/config'
DISCOVERY_TOPIC_EVENT = f'{HOMEASSISTANT_PREFIX}/sensor/{MQTT_TOPIC_PREFIX}/{{}}_event/config'
DISCOVERY_TOPIC_EVENT_TYPE = f'{HOMEASSISTANT_PREFIX}/sensor/{MQTT_TOPIC_PREFIX}/{{}}_event_type/config'
DISCOVERY_TOPIC_CREATED = f'{HOMEASSISTANT_PREFIX}/sensor/{MQTT_TOPIC_PREFIX}/{{}}_created/config'
DISCOVERY_TOPIC_SWITCH = f'{HOMEASSISTANT_PREFIX}/switch/{MQTT_TOPIC_PREFIX}/{{}}_switch/config'
DISCOVERY_TOPIC_RESTART = f'{HOMEASSISTANT_PREFIX}/button/{MQTT_TOPIC_PREFIX}/{{}}_restart/config'
WATCHED_EVENTS = ('create', 'destroy', 'die', 'pause', 'rename', 'start', 'stop', 'unpause')
UP_EVENTS = ('create', 'rename', 'start', 'unpause', 'stop')
SWITCH_TOPIC_REGEX = r'^.*\/(.*)\/switch$'
RESTART_TOPIC_REGEX = r'^.*\/(.*)\/restart$'
JSON_ONLY_REGEX = r'^(\{.*\})(\.*)$'

docker_events = queue.Queue()
known_containers = {}
pending_destroy_operations = {}
docker_events_cmd = ['docker', 'events', '-f', 'type=container', '--format', '{{json .}}']
docker_ps_cmd = ['docker', 'ps', '-a', '--format', '{{json .}}']
docker_inspect_cmd = ['docker', 'inspect', '--format', '{{json .}}' ]
docker_start_cmd = ['docker', 'start']
docker_stop_cmd = ['docker', 'stop']
docker_restart_cmd = ['docker', 'restart']
invalid_ha_topic_chars = re.compile(r'[^a-zA-Z0-9_-]')
ha_online = False
initialized = False
initializing = False
client = mqtt.Client(f'{MQTT_CLIENT_ID}')
loglevel = "logging."+LOGGING

@atexit.register
def mqtt_disconnect():
    """Called by atexit to make sure we send our last_will message.
    """
    client.publish(f'{MQTT_TOPIC_PREFIX}/status', 'offline', qos=MQTT_QOS, retain=True)
    client.disconnect()
    logging.warn('MQTT client disconnected')
    sleep(1)
    client.loop_stop()

def mqtt_connect():
    client.username_pw_set(username=MQTT_USER, password=MQTT_PASSWD)
    client.will_set(f'{MQTT_TOPIC_PREFIX}/status', 'offline', qos=MQTT_QOS, retain=True)
    client.on_message = message_received
    client.on_subscribe = on_subscribe
    client.on_log = on_log
    client.on_connect = on_connect
    client.loop_start()
    client.connect(MQTT_HOST, MQTT_PORT, MQTT_TIMEOUT)
    sleep(4)
    logging.info('MQTT connection initiated')

def mqtt_send(send_topic, payload, retain=False):
    try:
        logging.debug(f'Sending to MQTT: {send_topic}: {payload}')
        client.publish(send_topic, payload=payload, qos=MQTT_QOS, retain=retain)
    except Exception as e:
        logging.debug(f'MQTT Publish Failed: {e}')

def mqtt_receive(receive_topic):
    try:
        logging.debug(f'Subscribing to MQTT: {receive_topic}')
        client.subscribe(receive_topic, qos=MQTT_QOS)
        logging.debug (f'MQTT topic subscribed: {receive_topic}')
    except Exception as e:
        logging.error(f'MQTT Subscribe Failed: {e}')
        
def on_subscribe(mosq, obj, mid, granted_qos):
    logging.debug("Subscribed acknowledgment: " + str(mid) + " " + str(granted_qos))

def message_received(client, userdata, message):
    global ha_online
    logging.info(f'Message received')
    if "homeassistant/status" in message.topic and "online" in str(message.payload):
        ha_online = True
        logging.info(f'Home assistant is online.  Checking if docker2mqtt initialized.')
        if initialized == False and initializing == False:
            logging.info(f'Docker2mqtt autodiscovery not complete.  Initiating...')
            initialize_containers_with_ha()
        elif initialized == True:
            initialized == False
            logging.info(f'Home Assistant back online.  Reinitiating autodiscovery')
            initialize_containers_with_ha()
    elif "homeassistant/status" in message.topic and "offline" in str(message.payload):
        ha_online = False
        logging.info(f'Home Assistant is offline')
        sleep(4)
    else:
        logging.debug(f'{message.topic}')
        if 'switch' in str(message.topic):
            switch_message = re.search(SWITCH_TOPIC_REGEX, message.topic)
            container_name = switch_message.group(1)
            logging.debug(f'Extracted container name: {container_name}')
            if 'on' in str(message.payload):
                known_containers[container_name]['status'] = 'starting'
                logging.info(f'Switch on received on {message.topic}, {container_name}')
                docker_start_cmd.append(container_name)
                run(docker_start_cmd)
                docker_start_cmd.remove(container_name)
                logging.info(f'Start command sent to docker for {container_name}')
                sleep(1)
            elif 'off' in str(message.payload):
                known_containers[container_name]['status'] = 'stopping'
                logging.info(f'Switch off received on {message.topic}, {container_name}')
                docker_stop_cmd.append(container_name)
                run(docker_stop_cmd)
                docker_stop_cmd.remove(container_name)
                logging.info(f'Stop command sent to docker for {container_name}')
                sleep(1)
        elif 'restart' in str(message.topic):
            restart_message = re.search(RESTART_TOPIC_REGEX, message.topic)
            container_name = restart_message.group(1)
            logging.debug(f'Extracted container name: {container_name}')
            known_containers[container_name]['status'] = 'restarting'
            logging.info(f'Restart received on {message.topic}, {container_name}')
            docker_restart_cmd.append(container_name)
            run(docker_restart_cmd)
            docker_restart_cmd.remove(container_name)
            logging.info(f'Restart command sent to docker for {container_name}')
            sleep(1)

def on_log(client, userdata, level, string):
    print(string)

def on_connect(client, userdata, flags, rc):
    if rc == 0:
        logging.info('Connection established to broker')
        mqtt_send(f'{MQTT_TOPIC_PREFIX}/status', 'online', retain=True)
        mqtt_receive('homeassistant/status')
        sleep(10)
    else:
        logging.warn('No connection established to broker')

def initialize_containers_with_ha():
    global initializing
    global initialized
    initializing = True
    if ha_online == True:
        logging.info(f'Registering all containers with Home Assistant')
        for container in known_containers:
            register_container(container)
    else:
        logging.info(f'Home assistant not online, skipping autodiscovery.')
    initialized = True
    initializing = False

def register_container(new_container):
    """
    """
    attributes = known_containers[new_container]
    image = known_containers[new_container]['image']
    registration_topic_status = DISCOVERY_TOPIC_STATE.format(invalid_ha_topic_chars.sub('_', new_container))
    registration_packet_status = {
        'name': 'state',
        'unique_id': f'{MQTT_TOPIC_PREFIX}_{registration_topic_status}',
        'device': {'identifiers': f'{HOMEASSISTANT_NAME_PREFIX.title()} {new_container}', 'name': f'{HOMEASSISTANT_NAME_PREFIX.title()} {new_container}', 'model': f'{HOMEASSISTANT_NAME_PREFIX.title()} {image}', 'manufacturer': 'Docker', 'suggested_area': 'Media' },
        'availability_topic': f'{MQTT_TOPIC_PREFIX}/status',
        'payload_available': 'online',
        'payload_not_available': 'offline',
        'state_topic': f'{MQTT_TOPIC_PREFIX}/{new_container}',
        'value_template': '{{ value_json.state }}',
        'payload_on': 'on',
        'payload_off': 'off',
        'device_class': 'running',
        'json_attributes_topic': f'{MQTT_TOPIC_PREFIX}/{new_container}'
    }
    mqtt_send(registration_topic_status, json.dumps(registration_packet_status, default=lambda o: o.__dict__, indent=4), retain=True)
    mqtt_send_topic = f'{MQTT_TOPIC_PREFIX}/{new_container}'
    mqtt_send(mqtt_send_topic, json.dumps(attributes), retain=True)

    # Discover switch
    if not ((re.search('home', new_container, re.IGNORECASE) and re.search('assistant', new_container, re.IGNORECASE)) or re.search('docker2mqtt', new_container, re.IGNORECASE)):
        registration_topic_switch = DISCOVERY_TOPIC_SWITCH.format(invalid_ha_topic_chars.sub('_', new_container))
        registration_packet_switch = {
            'name': 'switch',
            'unique_id': f'{MQTT_TOPIC_PREFIX}_{registration_topic_switch}',
            'device': {'identifiers': f'{HOMEASSISTANT_NAME_PREFIX.title()} {new_container}', 'name': f'{HOMEASSISTANT_NAME_PREFIX.title()} {new_container}', 'model': f'{HOMEASSISTANT_NAME_PREFIX.title()} {image}', 'manufacturer': 'Docker', 'suggested_area': 'Media' },
            'availability_topic': f'{MQTT_TOPIC_PREFIX}/status',
            'payload_available': 'online',
            'payload_not_available': 'offline',
            'state_topic': f'{MQTT_TOPIC_PREFIX}/{new_container}',
            'command_topic': f'{MQTT_TOPIC_PREFIX}/{new_container}/switch',
            'value_template': '{{ value_json.state }}',
            'payload_on': 'on',
            'payload_off': 'off',
            'state_on': 'on',
            'state_off': 'off',
            'optimistic': 'false',
            'json_attributes_topic': f'{MQTT_TOPIC_PREFIX}/{new_container}'
        }
        mqtt_receive_topic_switch = f'{MQTT_TOPIC_PREFIX}/{new_container}/switch'
        logging.debug(f'Switch topic and packet defined: {mqtt_receive_topic_switch}; {registration_packet_switch}')
        mqtt_send(registration_topic_switch, json.dumps(registration_packet_switch, default=lambda o: o.__dict__, indent=4), retain=True)
        mqtt_receive(mqtt_receive_topic_switch)

    # Discover restart button
    registration_topic_restart = DISCOVERY_TOPIC_RESTART.format(invalid_ha_topic_chars.sub('_', new_container))
    registration_packet_restart = {
        'name': 'restart',
        'unique_id': f'{MQTT_TOPIC_PREFIX}_{registration_topic_restart}',
        'device': {'identifiers': f'{HOMEASSISTANT_NAME_PREFIX.title()} {new_container}', 'name': f'{HOMEASSISTANT_NAME_PREFIX.title()} {new_container}', 'model': f'{HOMEASSISTANT_NAME_PREFIX.title()} {image}', 'manufacturer': 'Docker', 'suggested_area': 'Media' },
        'availability_topic': f'{MQTT_TOPIC_PREFIX}/status',
        'payload_available': 'online',
        'payload_not_available': 'offline',
        'command_topic': f'{MQTT_TOPIC_PREFIX}/{new_container}/restart',
        'payload_press': 'restart',
        'json_attributes_topic': f'{MQTT_TOPIC_PREFIX}/{new_container}'
    }
    mqtt_receive_topic_restart = f'{MQTT_TOPIC_PREFIX}/{new_container}/restart'
    logging.debug(f'Restart topic and packet defined: {mqtt_receive_topic_restart}; {registration_packet_restart}')
    mqtt_send(registration_topic_restart, json.dumps(registration_packet_restart, default=lambda o: o.__dict__, indent=4), retain=True)
    mqtt_receive(mqtt_receive_topic_restart)

    # Discover 'event type' sensor
    registration_topic_event_type = DISCOVERY_TOPIC_EVENT_TYPE.format(invalid_ha_topic_chars.sub('_', new_container))
    registration_packet_event_type = {
        'name': 'event type',
        'unique_id': f'{MQTT_TOPIC_PREFIX}_{registration_topic_event_type}',
        'device': {'identifiers': f'{HOMEASSISTANT_NAME_PREFIX.title()} {new_container}', 'name': f'{HOMEASSISTANT_NAME_PREFIX.title()} {new_container}', 'model': f'{HOMEASSISTANT_NAME_PREFIX.title()} {image}', 'manufacturer': 'Docker', 'suggested_area': 'Media' },
        'availability_topic': f'{MQTT_TOPIC_PREFIX}/status',
        'payload_available': 'online',
        'payload_not_available': 'offline',
        'state_topic': f'{MQTT_TOPIC_PREFIX}/{new_container}',
        'value_template': '{{ value_json.status }}',
        'payload_on': 'on',
        'payload_off': 'off',
        'icon': 'mdi:play',
        'json_attributes_topic': f'{MQTT_TOPIC_PREFIX}/{new_container}'
    }
    mqtt_send(registration_topic_event_type, json.dumps(registration_packet_event_type, default=lambda o: o.__dict__, indent=4), retain=True)
    logging.debug(f'Event type topic and packet defined: {registration_topic_event_type}; {registration_packet_event_type}')


    # Discover 'event date' sensor
    registration_topic_event = DISCOVERY_TOPIC_EVENT.format(invalid_ha_topic_chars.sub('_', new_container))
    registration_packet_event = {
        'name': 'event',
        'unique_id': f'{MQTT_TOPIC_PREFIX}_{registration_topic_event}',
        'device': {'identifiers': f'{HOMEASSISTANT_NAME_PREFIX.title()} {new_container}', 'name': f'{HOMEASSISTANT_NAME_PREFIX.title()} {new_container}', 'model': f'{HOMEASSISTANT_NAME_PREFIX.title()} {image}', 'manufacturer': 'Docker', 'suggested_area': 'Media' },
        'availability_topic': f'{MQTT_TOPIC_PREFIX}/status',
        'payload_available': 'online',
        'payload_not_available': 'offline',
        'state_topic': f'{MQTT_TOPIC_PREFIX}/{new_container}',
        'value_template': '{{ value_json.event }}',
        'payload_on': 'on',
        'payload_off': 'off',
        'device_class': 'timestamp',
        'json_attributes_topic': f'{MQTT_TOPIC_PREFIX}/{new_container}'
    }
    mqtt_send(registration_topic_event, json.dumps(registration_packet_event, default=lambda o: o.__dict__, indent=4), retain=True)
    logging.debug(f'Event date topic and packet defined: {registration_topic_event}; {registration_packet_event}')

    # Discover 'created' sensor
    registration_topic_created = DISCOVERY_TOPIC_CREATED.format(invalid_ha_topic_chars.sub('_', new_container))
    registration_packet_created = {
        'name': 'created',
        'unique_id': f'{MQTT_TOPIC_PREFIX}_{registration_topic_created}',
        'device': {'identifiers': f'{HOMEASSISTANT_NAME_PREFIX.title()} {new_container}', 'name': f'{HOMEASSISTANT_NAME_PREFIX.title()} {new_container}', 'model': f'{HOMEASSISTANT_NAME_PREFIX.title()} {image}', 'manufacturer': 'Docker', 'suggested_area': 'Media' },
        'availability_topic': f'{MQTT_TOPIC_PREFIX}/status',
        'payload_available': 'online',
        'payload_not_available': 'offline',
        'state_topic': f'{MQTT_TOPIC_PREFIX}/{new_container}',
        'value_template': '{{ value_json.created }}',
        'payload_on': 'on',
        'payload_off': 'off',
        'device_class': 'timestamp',
        'json_attributes_topic': f'{MQTT_TOPIC_PREFIX}/{new_container}'
    }
    mqtt_send(registration_topic_created, json.dumps(registration_packet_created, default=lambda o: o.__dict__, indent=4), retain=True)
    logging.debug(f'Created date topic and packet defined: {registration_topic_created}; {registration_packet_created}')

def status_mapping(status):
    if status in ['starting','restarting']:
        state = 'on'
    else:
        state = 'off'
    return state

def readline_thread():
    """Run docker events and continually read lines from it.
    """
    with Popen(docker_events_cmd, stdout=PIPE, text=True) as proc:
        while True:
            try:
                docker_events.put(proc.stdout.readline())
            except AttributeError:
                remove_non_json = re.search(JSON_ONLY_REGEX, proc.stdout.readline())
                logging.debug(f'Mixed message received')
                remaining_json = remove_non_json.group(1)
                container_id = remove_non_json.group(2)
                logging.debug(f'Message separated')
                docker_events.put(remaining_json)
                now = (datetime.now()).isoformat()
                if container_id in known_containers and known_containers[container_id]['status'] in ['running','stopped','restarting']:
                    state = status_mapping(known_containers[container_id]['status'])
                    new_status = known_containers[container_id]['status']
                    status_update = {
                        'state': state,
                        'status': new_status,
                        'event': now
                    }
                    mqtt_send_status_update = f'{MQTT_TOPIC_PREFIX}/{known_containers["container"]}'
                    mqtt_send(mqtt_send_status_update, json.dumps(status_update), retain=True)
                    del(known_containers[container_id])

def process_status_message(event, container):
    stoptime = localtime(event['time'])
    if event['status'] in UP_EVENTS:
        docker_event_inspect = docker_inspect_cmd
        docker_event_inspect.append(container)
        container_event_inspect = run(docker_event_inspect, stdout=PIPE, text=True)
        container_event_details = json.loads(container_event_inspect.stdout)
        docker_event_inspect.remove(container)
        ip = {}
        for adapter in container_event_details['NetworkSettings']['Networks']:
            ip[adapter] = container_event_details['NetworkSettings']['Networks'][adapter]['IPAddress']
            ipaddress = f'{ip[adapter]}'

    if event['status'] in WATCHED_EVENTS:
        now = datetime.now()
        if event['status'] == 'create':
            # Cancel any previous pending destroys and add this to known_containers.
            logging.debug(f'Container {container} has been created.')
            if container in pending_destroy_operations:
                logging.debug(f'Removing pending delete for {{container}}.')
                del(pending_destroy_operations[container])

            known_containers[container] = {
                'name': container,
                'image': event['from'],
                'status': 'created',
                'state': 'off',
                'created': container_event_details['Created'],
                'event': container_event_details['State']['StartedAt'],
                'ip': ipaddress
            }
            register_container(known_containers[container])

        elif event['status'] == 'destroy':
            # Add this container to pending_destroy_operations.
            logging.debug(f'Container {container} has been destroyed.')
            pending_destroy_operations[container] = time()
            known_containers[container]['status'] = 'destroyed'
            known_containers[container]['state'] = 'off'
            known_containers[container]['event'] = stoptime

        elif event['status'] == 'die':
            logging.info(f'Container {container} has stopped.')
            known_containers[container]['status'] = 'stopped'
            known_containers[container]['state'] = 'off'
            known_containers[container]['created'] = container_event_details['Created']
            known_containers[container]['event'] = stoptime

        elif event['status'] == 'pause':
            logging.debug(f'Container {container} has paused.')
            known_containers[container]['status'] = 'paused'
            known_containers[container]['state'] = 'off'
            known_containers[container]['created'] = container_event_details['Created']
            known_containers[container]['event'] = stoptime

        elif event['status'] == 'rename':
            old_name = event['Actor']['Attributes']['oldName']
            if old_name.startswith('/'):
                old_name = old_name[1:]
            logging.debug(f'Container {old_name} renamed to {container}.')
            mqtt_send(f'{HOMEASSISTANT_PREFIX}/binary_sensor/{old_name}_status/config', '', retain=True)
            mqtt_send(f'{HOMEASSISTANT_PREFIX}/sensor/{old_name}_event/config', '', retain=True)
            mqtt_send(f'{HOMEASSISTANT_PREFIX}/sensor/{old_name}_event_type/config', '', retain=True)
            mqtt_send(f'{HOMEASSISTANT_PREFIX}/sensor/{old_name}_created/config', '', retain=True)
            mqtt_send(f'{HOMEASSISTANT_PREFIX}/switch/{old_name}_switch/config', '', retain=True)
            mqtt_send(f'{MQTT_TOPIC_PREFIX}/{old_name}', '', retain=True)

            known_containers[container] = {
                'name': container,
                'image': known_containers[old_name]['image'],
                'status': known_containers[old_name]['status'],
                'state': known_containers[old_name]['state'],
                'created': container_event_details['Created'],
                'event': container_event_details['State']['StartedAt'],
                'ip': ipaddress
            }
            register_container(known_containers[container])
            del(known_containers[old_name])

        elif event['status'] == 'start':
            logging.info(f'Container {container} has started.')
            known_containers[container]['status'] = 'started'
            known_containers[container]['state'] = 'on'
            known_containers[container]['created'] = container_event_details['Created']
            known_containers[container]['event'] = container_event_details['State']['StartedAt']
            known_containers[container]['ip'] = ipaddress

        elif event['status'] == 'unpause':
            logging.debug(f'Container {container} has unpaused.')
            known_containers[container]['status'] = 'starting'
            known_containers[container]['state'] = 'on'
            known_containers[container]['created'] = container_event_details['Created']
            known_containers[container]['event'] = container_event_details['State']['StartedAt']
            known_containers[container]['ip'] = ipaddress

        mqtt_send(f'{MQTT_TOPIC_PREFIX}/{container}', json.dumps(known_containers[container]), retain=True)

def run_docker_ps():
    # Register containers with HA
    docker_ps = run(docker_ps_cmd, stdout=PIPE, text=True)
    for line in docker_ps.stdout.splitlines():
        container_status = json.loads(line)
        logging.info(json.loads(line))
        docker_register_inspect = docker_inspect_cmd
        docker_register_inspect.append(container_status['Names'])
        container_inspect = run(docker_register_inspect, stdout=PIPE, text=True)
        container_details = json.loads(container_inspect.stdout)
        logging.debug(container_details)
        docker_register_inspect.remove(container_status['Names'])
        created = container_details['Created']
        ip = {}
        for adapter in container_details['NetworkSettings']['Networks']:
            ip[adapter] = container_details['NetworkSettings']['Networks'][adapter]['IPAddress']
            ipaddress = f'{ip[adapter]}'

        if 'Paused' in container_status['Status']:
            status_str = 'paused'
            state_str = 'off'
            event = container_details['State']['FinishedAt']
        elif 'Up' in container_status['Status']:
            status_str = 'running'
            state_str = 'on'           
            event = container_details['State']['StartedAt']
        else:
            status_str = 'stopped'
            state_str = 'off'
            event = container_details['State']['FinishedAt']
        
        logging.debug(f'Container details for {container_status["Names"]} added to registry')
        known_containers[container_status['Names']] = {
            'name': container_status['Names'],
            'image': container_status['Image'],
            'created': created,
            'status': status_str,
            'state': state_str,
            'event': event,
            'ip': ipaddress
        }
        logging.debug(f'{known_containers[container_status["Names"]]}')
    logging.info(f'All container details read from Docker')

def docker_events_process():
    docker_events_t = Thread(target=readline_thread, daemon=True)
    docker_events_t.start()
    
    # Loop and wait for new events
    while True:
        # Remove any destroyed containers that have passed the TTL
        for container, destroyed_at in pending_destroy_operations.copy().items():
            if time() - destroyed_at > DESTROYED_CONTAINER_TTL:
                logging.debug(f'Removing container {container} from MQTT.')
                registration_topic_state = DISCOVERY_TOPIC_STATE.format(invalid_ha_topic_chars.sub('_', container))
                mqtt_send(registration_topic_state, '', retain=True)
                registration_topic_event = DISCOVERY_TOPIC_EVENT.format(invalid_ha_topic_chars.sub('_', container))
                mqtt_send(registration_topic_event, '', retain=True)
                registration_topic_event_type = DISCOVERY_TOPIC_EVENT.format(invalid_ha_topic_chars.sub('_', container))
                mqtt_send(registration_topic_event_type, '', retain=True)
                registration_topic_created = DISCOVERY_TOPIC_CREATED.format(invalid_ha_topic_chars.sub('_', container))
                mqtt_send(registration_topic_created, '', retain=True)
                registration_topic_switch = DISCOVERY_TOPIC_SWITCH.format(invalid_ha_topic_chars.sub('_', container))
                mqtt_send(registration_topic_switch, '', retain=True)
                mqtt_send(f'{MQTT_TOPIC_PREFIX}/{container}', '', retain=True)
                del(pending_destroy_operations[container])
                del(known_containers[container])

        # Collect and process an event from `docker events`
        try:
            line = docker_events.get(timeout=1)
        except queue.Empty:
            # No data right now, just move along.
            continue
 
        event = json.loads(line)
        if event['status'] not in WATCHED_EVENTS:
            continue
        logging.info(json.loads(line))

        container = event['Actor']['Attributes']['name']

        try:
            process_status_message(event, container)
        except:
            continue

if __name__ == '__main__':
    logging.basicConfig(level=loglevel)
    run_docker_ps()
    mqtt_connect()
    docker_events_process()